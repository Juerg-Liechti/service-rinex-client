"""
    swipos Service API

     ![](https://api3.geo.admin.ch/_static/bg_header_logo.png) *** The swipos Service API provides tools for interfacing with the Swiss Positioning Service swipos. This is the main documentation which includes all the API documentation for developers.  At the moment, the swipos Service API only consists of the RINEX API. More APIs might be added at a later time.  # RINEX  The swipos RINEX API offers an interface to the AGNES station information and their RINEX data. RINEX data is available for full hours, or it can be requested for a desired duration. Via the API, you can request RINEX data for the last 100 days.  When using the API, the following conventions apply:  ## Time Dates, times and durations are expressed in a swisstopo-created custom format that is based on **ISO 8601**.  GPS time is usually given in seconds, and is related to the international atomic time (TAI). This differs from the Universal Time Coordinated (UTC), which is kept synchronized to the earth's rotation by leap seconds. The relation can be expressed as *GPSTime = UTC + 18s*  To simplify the use of the API, we kept the formats proposed in ISO 8601, and added **G** as a timezone indicator instead of the **Z** used for UTC time. Times that do not end with **G** are treated as having invalid format.  The API accepts only durations of up to 6 hours, so all durations must start with PT (period, time), followed by the duration in hours and/or minutes.  If requesting an hour file, it is enough to fill the hour; it is not necessary to give minutes or seconds.  **Examples:**  - basic format: `yyyyMMddThhmmG / 20200821T1313G` OR `yyyMMddThhG / 20210217T05G` - extended format: `yyyy-MM-ddThh:mmG / 2020-08-21T13:13G` - duration (in hours, minutes): `PTnHmmM / PT3H30M`  As of now, times without the timezone G will not be considered valid times.   ### Epochs The RINEX data is recorded at the base station and will be sent every hour to the swipos servers. One hour file contains 3600 epochs if all recordings were successful. An hour file will be available around 20 minutes after the hour has ended.  Please note, that the delivered RINEX files may not contain 100% of the epochs due to recording issues.  ## Coordinate system Unless otherwise stated, the RINEX API uses latitude and longitude in decimal degrees in the **ETRS89** reference system.  **Example:**   `46.28310, 7.53854`  **Note:** The coordinates in the base station information are to be used for representation only, they are not intended for geodetic calculations. The geocentric coordinates contained in the RINEX file as approximate position can be used as precise coordinates.  ## RINEX 3.03 format The delivered RINEX format is 3.03 with 1 second sampling rate as recorded at the base station. To manipulate the RINEX, the RINEX GNSS Data Conversion and Manipulation Toolbox \"gfzrnx\" is used: Nischan,  Thomas  (2016):  GFZRNX  -  RINEX  GNSS  Data  Conversion  and  Manipulation  Toolbox. [GFZ  DataServices](http://dx.doi.org/10.5880/GFZ.1.1.2016.002)  The RINEX files are compressed with [hananaka](https://terras.gsi.go.jp/ja/crx2rnx.html). The download includes both the observation and navigation files.   ## Station code The base station is always identified by its 4 character station code, which is case sensitive and must use capital letters, as returned by the /list endpoint.  **Example:**   `ZIM2`  ## Authentication  The API uses basic authentication for all calls.  ## API specification The api specification was defined as openapi version 3.0.0 [openapi spec](https://github.com/OAI/OpenAPI-Specification/).   Here you can find the current developement api specification [api-docs.yml](https://swipos-dev-apidoc.s3.eu-central-1.amazonaws.com/api-docs.yml).   Here you can find the current productive api specification [api-docs.yml](https://swipos-apidoc.s3.eu-central-1.amazonaws.com/api-docs.yml).   To generate clients use [openapi-generator](https://openapi-generator.tech/).   swisstopo offers no support for client implementations. This is a test release.  ### Versioning Versions are named after plants. Version are alphabetically sorted, where letters later in the alphabet corresnpond with a version published later in time. For minor releases, the second or third letter of the name is significant.  **Examples:**  - `acacia` - 1st release - `aconite` - 1st minor release - `babysbreath` - 2nd release   # noqa: E501

    The version of the OpenAPI document: acacia
    Contact: swipos@swisstopo.ch
    Generated by: https://openapi-generator.tech
"""



class OpenApiException(Exception):
    """The base exception class for all OpenAPIExceptions"""


class ApiTypeError(OpenApiException, TypeError):
    def __init__(self, msg, path_to_item=None, valid_classes=None,
                 key_type=None):
        """ Raises an exception for TypeErrors

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list): a list of keys an indices to get to the
                                 current_item
                                 None if unset
            valid_classes (tuple): the primitive classes that current item
                                   should be an instance of
                                   None if unset
            key_type (bool): False if our value is a value in a dict
                             True if it is a key in a dict
                             False if our item is an item in a list
                             None if unset
        """
        self.path_to_item = path_to_item
        self.valid_classes = valid_classes
        self.key_type = key_type
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiTypeError, self).__init__(full_msg)


class ApiValueError(OpenApiException, ValueError):
    def __init__(self, msg, path_to_item=None):
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list) the path to the exception in the
                received_data dict. None if unset
        """

        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiValueError, self).__init__(full_msg)


class ApiAttributeError(OpenApiException, AttributeError):
    def __init__(self, msg, path_to_item=None):
        """
        Raised when an attribute reference or assignment fails.

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiAttributeError, self).__init__(full_msg)


class ApiKeyError(OpenApiException, KeyError):
    def __init__(self, msg, path_to_item=None):
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = "{0} at {1}".format(msg, render_path(path_to_item))
        super(ApiKeyError, self).__init__(full_msg)


class ApiException(OpenApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        if http_resp:
            self.status = http_resp.status
            self.reason = http_resp.reason
            self.body = http_resp.data
            self.headers = http_resp.getheaders()
        else:
            self.status = status
            self.reason = reason
            self.body = None
            self.headers = None

    def __str__(self):
        """Custom error messages for exception"""
        error_message = "({0})\n"\
                        "Reason: {1}\n".format(self.status, self.reason)
        if self.headers:
            error_message += "HTTP response headers: {0}\n".format(
                self.headers)

        if self.body:
            error_message += "HTTP response body: {0}\n".format(self.body)

        return error_message


class NotFoundException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        super(NotFoundException, self).__init__(status, reason, http_resp)


class UnauthorizedException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        super(UnauthorizedException, self).__init__(status, reason, http_resp)


class ForbiddenException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        super(ForbiddenException, self).__init__(status, reason, http_resp)


class ServiceException(ApiException):

    def __init__(self, status=None, reason=None, http_resp=None):
        super(ServiceException, self).__init__(status, reason, http_resp)


def render_path(path_to_item):
    """Returns a string representation of a path"""
    result = ""
    for pth in path_to_item:
        if isinstance(pth, int):
            result += "[{0}]".format(pth)
        else:
            result += "['{0}']".format(pth)
    return result
